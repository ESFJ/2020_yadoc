환경변수 설정하는 법
  시작 설정 시스템정보 고급시스템설정 환경변수 새로만들기
  시스템변수에 하는게 편함
    환경변수 이름 JAVA_HOME
    변수값은 찾기에서 자바 깔아놓은 그 파일들어가면 됨
  Path 있는지 확인 - 편집(추가) - %JAVA_HOME%\bin 추가


자바 개발하는법
통합개발환경IDE
Eclipse           < 우리가 사용할것
Netbeans        < 오라클에서 만든 개발환경 
Intellij             < 유료^^(월 오십)
주로 사용함
[박도희] [오전 10:31] 이클립스 다운
2018-12월버전이 제일 안정적이고 괜찮다고 함. 그전버전은 너무 옛날버전이라고
[박도희] [오전 10:36] Winrar 압축푸는파일 설치
rarlab.com/download.htm > Korean64bit
J어쩌구로 압축풀기로 푸셈
아니 이클립스
아 그러면 이클립스가 압축풀리는거였음
변수와 데이터타입
 변수? 임시로 사용하는 값. 기억장치(임시)
데이터타입? 변수를 저장하기위해 필요한 '그릇'. 
자바의 기본 데이터 타입:

정수형(숫자, 정수만 가능)
byte(1바이트, -128~127, 크기가 작아서 잘 안씀)
short(2바이트, -32768~32767)
int(4바이트 -21억~21억)
long(8바이트, -922조~922조) 

실수형(숫자, 실수(소수점ㅇ)사용가능)
float(4바이트, 유효숫자 6-7자리)
double(8바이트 유효숫자 14-15)

문자형
char 하나의 유니코드 문자 

참거짓
boolean 참true / 거짓false, 컴퓨터가 제일 좋아하는 제일 간단한 타입.
sysout cntl+space > 자동완성

산술연산자
+ 덧셈
- 뺄셈
* 곱셈
/ 나눗셈
% 나머지

형변환(Type Casting, Casting)
  묵시적 형변환 = 자동 형변환
    스스로 형변환이 됨
  명시적 형변환 = 수동 형변환 -> (원하는타입)변수
    사용자가 형변환을 해주는 경우

*boolean은 형변환이 안됨.
  작은 타입 -> 큰 타입 자동 형변환
  덜 정밀한 타입 -> 정밀한 타입 자동 형변환

  큰 타입 -> 작은타입 수동 형변환
  정밀한 타입 -> 덜 정밀한 타입 수동 형변환

값의 입출력
  출력
    System.out.println(....)

  입력
    Scanner 사용
      퍼블릭 윗줄에 import java.util.Scanner; 
      Scanner scan = new Scanner(System.in);



과제1.
  키와 몸무게를 입력받아 체질량 지수 구하기

  프로그램명 : Bmi.java

    키 입력?
    176.5
    몸무게 입력?
    79

    당신의 체질량지수는 ???


  bmi = 몸무게(kg) / (키(m)*키)



----------------------------------------------오후-----------------------------------------------

<<관계 연산자와 조건문>>

  관계연산자
    ==	같다
    !=	같지않다
    >	크다
    >=	크거나 같다
    <	작다
    <=	작거나 같다
    결과가 참/거짓(boolean)으로 나옴

  조건문
    1) if문
      if(조건1) {
        조건1이 참이면 실행
      } else if(조건2){
        조건1이 거짓이고 조건2가 참이면 실행
      } else if(조건3){
        조건1,2가 거짓이고 조건3이 참이면 실행
      } else {
        조건1, 2, 3 모두 거짓인 경우 실행
      }

    2) switch문
      switch (변수){
        case 값1:
          변수가 값1과 일치하면 실행;
          break;
        case 값2:
          변수가 값2과 일치하면 실행;
          break;
        ....
        default:
          변수가 값1, 값2 어느쪽이든 일치하지 않으면 실행;
          break;
      }
    *break를 생략하면 아래로 계속 진행됨.
  
좋아하는 계절 입력:(1:봄, 2:여름, 3:가을, 4:겨울)


<<대입 및 증감 연산자와 반복문>>

  1) 대입 연산
    a = 1		a의 값이 1이다
    a = a+1 	a의 값은 a값+1이다.
		a += 1로도 표현가능.(다른 사칙연산들로도 적용가능)
		a++ 이라고하면 1이 증가됨.(a--는 1 감소)

  2) 반복문
    2-1) while
      while(조건){
        조건이 참인 경우 반복
        한번도 실행을 안할수도있음.
      }

    2-2) do-while
      do{
        일단 한번 실행한뒤 조건을 확인
      } while(조건);

    ****while문과 do-while문은 반복문 내부에서 조건이 종료될 수 있도록 해줘야함!!****

    2-3) for
      for(시작...(처음 한번만 실행) ; 조건(확인후 괄호 내용 반복) ; 증감연산(반복문이 한번 끝날때마다 적용) ) {
        조건이 참일때 반복
      }

    2-4) 개선된 for문(배열전용 for문)
      for(데이터타입 변수이름 : 반복할 배열이름) {	num = array[i]의 역할을 함
        반복시킬 내용
      }
  
  3) break와 continue
    break		가장 가까운 반복문을 탈출
    continue	다음 조건(증감식)으로 간다.
		그 아래 내용은 무시하고 다음턴으로 넘어감.

<<배열 ARRAY>>

  같은 타입의 멀티 데이터를 같이 처리하는 구조
  자바에서는 배열을 객체로 처리한다.
  데이터타입[] 배열이름 = new 데이터타입[];
  배열의 시작은 0이다.
  자바는 기본적으로 전부 값이 0으로 들어가있음.
  배열이름[n] 으로 n번째 배열의 값에 접근 가능


	#배열을 이용한 로또(1-45사이의 임의의 숫자 6개 출력)
	-> 크기가 6인 배열을 만든다.
	-> 숫자를 넣고 출력한다.


<<객체(Object)>>

  1)클래스(Class)
    객체를 만들수있는 설계도, 틀

  2)필드(field)
    객체에 들어가는(필요한) 변수들
    객체에 저장하고자 하는 정보들

  3) 인스턴스(instance)
    클래스를 가지고 만들어낸 객체
    클래스명 인스턴스명 = new 클래스명(); 으로 생성

  4) 메소드(method)
    객체가 하는 행동들
    인스턴스 생성후 그 행동을 부르면 행동을 하게됨.

  5) ★★★★★생성자(Constructor)★★★★★
    인스턴스를 생성할때 자동으로 호출되는 함수
    생성자의 이름은 클래스의 이름과 같아야함
    5-1) 매개변수가 있는 생성자
      생성자는 보통 매개변수(parameter)를 지정하기위해 사용됨
      

----------------------------------★숙제 프로젝트★----------------------------------------
프로젝트명 : HelloSukje

User.java
UserMain.java

User
  - String firstName;	//이름(형구)
  - String lastName; 	//성(임)
  - String name;		//사용자이름(damansa)
  - String birthday;		//생년월일(1999-09-09)
  - long registrationNumber;	//주민번호(9909091234567)
  -double userRank;	//사용자평점(5.1)

  - 생성자 작성
  - 메소드 작성(show())

UserMain
  - User user = new User("형구", "임", "damansa", 9909091234567);
  - user.show();
    결과
      이름: 형구
      성: 임
      사용자이름: damansa
      주민번호: 9909091234567
      생년월일:
      평점: 0.0




-----------------------------------------200601---------------------------------------
객체지향언어 OOP

캡슐화
  외부에서 내부의 일을 안보이게 하는것
  클래스를 만드는것 자체도 캡슐화라고 할수있다.
  캡슐화의 세가지 종류
    1. 필드를 사용한 캡슐화
      private 를 사용해서 일반적으로 접근할 수 없게하는것
	public 누구나 접근 가능함
	private 아무도 접근 안됨
      필드를 사용해서 정의하는 방법
    ★2. 생성자를 사용한 캡슐화
      생성자를 사용해서 필드 초기화
    3. 메서드를 사용한 캡슐화
      필드를 private로 하고 그 값에 접근하는 방법으로 getter, setter를 사용한다.
      3-1) getter / setter
        getter -> get필드이름 으로 사용하고 retur값은 필드의 타입과 동일
        setter -> set필드이름으로 하고 리턴값은 void.
                -> 파라미터로 들어온 값을 필드값으로 설정함.


상속
  부모자식관의 관계
  물려주는건 부모, 물려받는건 자식
    ex) 사람과 학생 중 더 큰 개념인 사람이 부모가 되고, 학생이 자식이 된다.
    ex) 사람과 회사원 -> 동일하게 사람이 더 큰 개념(부모)
  자식쪽에 extends 를 쓰고 부모쪽을 적어서 사용
  자식도 부모가 될 수 있다.
  부모쪽에서 겹치는 것들을 자식이 받아서 편하게 쓸수있음
  계층구조 사람<-(학생), (회사원), (군인), (정치가) ....
  부모 클래스의 객체도 만들수있음. -> 객체를 만들 필요가 없을땐 "추상클래스"로 만든다.
  자식 클래스에서는 부모 클래스의 생성자(있을 경우)를 반드시 호출해야한다.
  위치 : 자식 클래스의 생성자, 순서 : 제일 먼저
  super() 를 사용하면 부모클래스의 생성자에 접근할수있음.

  -------------------사람을 상속받은 회사원 클래스---------------------------
  SalaryMan
    int salary //필드

  SalaryMain
    이름: 문재인
    나이: 67
    급여: 2000
  --------------------------------------------------------------------------------

다형성
  상속과 관련이 있음.

추상 클래스
  클래스는 클래스인데 인스턴스를 생성할 수 없는 클래스
  -> 상속 전용 클래스
  기본 클래스를 만들듯이 만들고 abstract를 사용
  부모 클래스(추상클래스)의 추상 메소드는 자식 클래스에서 반드시 재정의해야한다.(Cntrl+Space)
 
  ---------------------원클래스--------------------------
    원의 면적 반지름*반지름*3.14159(원주율)
  --------------------------------------------------------

인터페이스(Interface)
  Interface = Promise(약속!)
  ex) USB, 키보드, 마우스, 선풍기 -> HDMI(동영상, 이미지, 사운드)
  클래스만들때 class자리에 interface 써둠 (public interface 인터페이스이름)
  추상메서드만 가능
  기본이 퍼블릭
  사용할땐 implements 인터페이스명 으로 가져옴
  클래스와 구분: 이름뒤에 + 'able' 로 인터페이스임을 명시 (클래스: eat, 인터페이스:eatable)
  인터페이스는 전부 public 이다! (private를 쓰면 의미가 없음)(기본이 public이라 걍 두면 퍼블릭으로 됨)
   
  ---------------------MyCircle------------------------
    areable 받아옴
    반지름, 면적
  ------------------------------------------------------
  --------------------Drivable-------------------------
    GoogleCar
    AppleCar		-> 구글카와 애플카의 인터페이스가 같음
			-> 생성하는 객체만 바꾸면 쉽게 다른 차로 바꿀수있음

  인터페이스명 객체명 = new 구현클래스명 의 방법으로 다형성(Polymorphism) 실현
  -------------------------------------------------------

다형성(Polymorphism)
  하나의 객체가 상황에 따라 다양한 형태를 가짐.
  인터페이스를 사용하여 쉽게 구현할수있음.

------------------------------------------------------------------------------

패키지
 코드를 관련성있는 것끼리 묶어 관리? ch1, ch2, ch3 ...
 디폴트패키지 - 패키지가 없으면 디폴트 패키지로 들어간다.
  소스코드 관리를 위해 패키지로 나눔
  다른 패키지의 것은 따로 상속같은걸 쓸수는 없지만(????) import를 사용해 간단하게 쓸수있음.

  static 정적메소드  <-> 동적 
    클래스앞에 static을 적어줌
    정적 메소드 인스턴스를 만들지않아도(만들수있는데 만들지않아도 괜찮음) 실행가능한 메소드
    추상 클래스는 아예 인스턴스를 만들수없는 클래스

  패키지 가져오는법
    1. 전체 패키지명 클래스명
    2. import문 -> 자바에선 이걸 더 많이 씀
      2-1) import 패키지명.*; (전체)
      2-2) import 패캐지명.클래스명; (클래스하나)


예외 처리(Exception)
  try catch문을 사용해 처리함
  try
    예외가 일어날 부분
  catch
    예외가 일어나면 할 일 (main처리)
  finally
    예외가 일어나든 안나든 할 일
    최종처리 -> 예외가 발생 하든 안하든 해주는 처리
    try랑 catch에서 무슨일이 일어나든 무조건 finally는 실행됨.

  try {
    예외,에러가 발생할 내용
  } catch(예외 이름?) {
    예외가 발생하면 할 일
  } finally {
    예외가 발생하든 안하든 해주는 부분
  }

  사용자가 예외처리를 안하면 자바가 맘대로 처리함
  프로그램이 다운되는것을 막기위해 예외처리를 해줌.
    ex) 0으로 나누는 경우 예외처리 필수

  사후처리 : 예외가 나타나면 처리
  사전처리 : 예외가 나타나기 전에 처리(try catch)


파일처리(File, Stream)
  File
    엑셀, 워드, 디렉토리, 폴더 등의 파일

  ★Stream
    파일을 읽고 쓰는 행위

  자바의 특징
    한번 만들어지면 어느 시스템이든 잘 돌아감!
    문제는 운영체제마다 파일이 다름..
    -> Stream이라는 방식으로 파일을 처리
    디렉토리랑 파일 모두 파일로 취급한다.(차이는 디렉토리는 다른 파일을 포함할수있음)
  java.io 라는 입출력 패키지를 주로 씀.
  입력
    나한테 들어오는것
    1) byte 단위
      기본적인 입출력 단위
      ★InputStream 인터페이스★로 사용
        파일의 끝에는 언제나 EOF(end of file)(-1)이 있음. 끝에는 값이 없고 그전까진 값이 있음
      -> 실무에서는 너무 느려서 잘 안씀

    2) 문자
      1byte를 넘는 경우 1character씩 받음
      ★Reader 인터페이스★ 사용
      파일리더를 쓰면 한글이 안깨짐 -> 유니코드로 된 문자들은 안깨짐
      fr = new FileReader(파일이름);

    
    3) 버퍼 (Buffer)
      buffer : 임시저장장소
      실무에서는 버퍼를 사용(10배쯤 빠름)
        bis = new BufferedInputStream(>>>file 인풋스트림으로 받음<<<<);
        br = new BufferedReader(fr); -> 이렇게하면 문자단위의 버퍼

  출력
    내가 내보내는것
    1) byte
      OutputStream
    2) 문자
      Writer 인터페이스
      문자를 출력하는 객체
      FileWriter를 사용할때 파일이름, true를 하면 없으면 생성 있으면 기존 파일에 추가

  PrintWriter
    stream 안붙었으니 문자 + writer니까 출력
    ex) System.out
    println, print같은것 제공해줌. 
    그냥 간단하게 슥슥 쓸수있는 그거라는 얘기임 코드에서 적은 내용을 파일로 옮겨적어줌.

자바 연산자
  && : AND (둘다 참 -> 참)
  || : OR ( 둘 중 하나 참 -> 참)
  ! : NOT (참->거짓, 거짓->참)


----------------------------------------------200602--------------------------------------
네트워크의 개념
  (클라이언트/고객)가 (서버/컴퓨터)에 요청을 하고,
  서버는 클라이언트가 언제 요청을 해도 응답할수있도록 대기하고있어야함
  클라이언트(고객) -요청-> <-응답- 서버(웹)
  
  프론트엔드
    제일 앞에 있다는 뜻.
    접속을 하는 스마트폰, 웹 브라우저 등의 맨 앞단
    클라이언트쪽 
    화면을 예쁘게하고 UI를 편하게 하는 등 사용자에게 보여주는 곳.
    HTML, JS, CSS 등

  백엔드
    서버단. 뒷단
    화면에 나오는 부분이 아닌 부분. 서버랑 비슷...?
    자바는 굳이 말하자면 백엔드쪽, 자바, PHP, 스프링, ASP, 서플넷? 등...
    우리쪽 포커스는 백엔드

  풀스택
    프론트엔드 + 백엔드
    한쪽을 주력으로 하고 나머지 한쪽을 연습하는 느낌
    
  URL
    http://으로 시작하는 웹주소들 www.으로 시작해서 도메인이 들어감.
    
  호스트
    집주인. 컴퓨터가 네트워크랑 연결됐을때 호스트가 됨.
    네트워크가 연결되면 컴퓨터마다 이름이 생김.
    연결이 되면 자기 호스트를 로컬 호스트라고 함.
    모든 컴퓨터는 네트워크에 연결된 순간 호스트 이름을 가진다.

  램카드를 가지고있는 컴퓨터는 네트워크에 연결 안돼도 호스트이름을 갖고있다.
  unkown host가 나오는 경우는 램카드가 아예 없는 옛날 컴퓨터임^^!
  그건 인터넷에 연결할수없는 컴퓨터.
  호스트이름은 바꿀수있음.(보통 안바꾸긴함)
  네트워크에 접속하면 호스트이름(부르기 쉽게), IP(찐으로 연결되는 방식)가 생김

  호스트네임
    host의 이름

  IP
    호스트의 주소
    IP를 알면 위치를 대략 알수있음.
    컴퓨터마다 IP가 있고 컴퓨터마다 다 다름. 4자리 숫자로 되어있음.....?
    000.000.0.00 이런 방식으로 되어있음.
    000.000.0 < 여기까진 보통 같은 건물은 같고 그 뒤로 달라지는듯..
    3번째자리 거기도 바뀔수도있음
    리얼 IP도 있겠지만 공유 아이피라고.... 있음..........ㅅㅂ머래는거임 진짜 개빡치네
    cmd창에서 ip conf 로도 확인할수있음.

  컴퓨터 두대가 있을때 통신을 하는 방법
    TCP/IP
      인터넷을 통해 연결하는 방법
      실제로는 각 컴퓨터마다 있는 소켓이 인터넷에 연결하는것
    
    소켓
      네트워크에서 선단(앞단)에서 데이터를 주고받는 장치
      실제로 있는건 아니고 소프트웨어적으로 패킷을 통해 접근하도록 함.
      
      소켓이 연결하는 방법
      1) 호스트 이름(혹은 IP주소)        
      2) 포트 번호(0~65535)

    웹 브라우저에서 google.com 을 접속하면 80번 포트로 들어간다.........
    웹서버의 기본 포트는 80번임.
    DB마다 포트가 있다.
    이메일도 포트가 있는데 이미 코딩으로 몇번 포트로 가는지 다 되어있어서 사용자는 신경쓸 필요가 없음.

  설정 > 정보 > 장치사양 에서 디바이스 이름이 호스트이름

  요청
    클라이언트가 서버에게 요청하는 것
    TCP/IP에서 정해놓은 방식. 이런 프로토콜을 TCP/IP라고 한다............
    요청방식
    1) GET function
      URL안에 요청할 데이터를 포함하는 방식
      사용하기 쉬움.
      URL을 쓰는 방식
      한글처리가 잘 안된다는 단점이 있음. 별도의 변환이 필요함.
      ex) 커피한잔 주세요

      GET 요청하는주소 HTTP/버전(1.0)\r\n\r\n 으로 print를 해서 요청을 보냄. (출력)
      파일 처리하는거랑 반대임. 내가 보낼때가 출력이고 내가 받을때가 입력임.

      네이버에서 줄때는 Reader로 오는게 아니고 InputStream방식으로 옴. 바이트형식
      -> inputstream으로 받아서 inputader를 사용해 문자로 변환함. -> BufferReader도 사용가능
      printWriter객체는 bufferedwriter와 마찬가지로 버퍼를 이용해 출력하므로 반드시 flush(버퍼를 비우는 처리)를 해주어야함.

    2) POST function
      스트림(=파일 열고닫기)에 저장해서 보내는 방식
      파일처럼 만들어서 스트림으로 보내는 방식
      복잡하긴한데 한번에 요청을 많이 보낼 수 있음. 속도가 빨라짐.
      글쓰기, 수정 같은 일을 POST로 함.
      ex) 메모장에 여러개의 주문을 적어서 보내줌.


---------------------------------------------TomCat-------------------------------------
  Tomcat download -> version 9 다운로드 -> core에서 zip 다운로드 -> 압축풀면 끝!(jdk가 있는 상황에서는 이게 끝임. 실제로는 jdk깔고 이것저것 하는 작업 필요)
  bin -> ★startup★ -> sh은 리눅스용 배치는 윈도우용->배치 실행
  서버는 끄는게 중요한데 그냥 끄면 안되고 끌때는 shutdown 실행 OR ★cntl+C★ (X버튼으로 끄지만 않으면 됨^^)
  startup 한 상태로 웹브라우저에서 localhost:8080 
  8080은 톰캣의 기본포트 (80은 안적어도 되는 포트, 8080은 적어야하는 포트..?)
  아파치에서 만든 자바 웹서버
  접속방식 : http://localhost:8080 (localhost는 자기 웹서버, 8080은 포트 합쳐서 URL)
  index.jsp 가 홈페이지임. (C:\Users\컴퓨터실23\Downloads\apache-tomcat-9.0.35\apache-tomcat-9.0.35\webapps\ROOT\index.jsp)

  서버코드 응답결과 코드, instance result code
    HTTP/1.1 200 
    http의 1.1 버전으로 접속됐다.

    200 : ok 정상적으로 서버 접속
    500 : 서버 실패 (서버의 문제)
    404 : 접속은 됐는데 그런 파일이 없음. (not found)
    400 : 요청이 잘못됨. (400번대는 클라이언트에서 요청의 문제)

  content type
    Content-Type: text/html;charset=UTF-8
    내가 어떤 서버를 요청했는지?
    이 컨텐츠 파일은 뭐다. 이 문서는 UTF-8로 작성되었다.
    image/jpge > 이미지, jpg타입의 컨텐츠라는 뜻

  Date: Tue, 02 Jun 2020 02:35:48 GMT
    요청한 날짜, 시간의 정보

  Connection: close
    웹이 계속 연결이 되어있는게 아니고 한번 보여주고 연결은 끊어져있음.

  사용자한테는 <!~ 이부분부터 보이게됨.

-----------------------------------------~TOMCAT은 여기까지~-----------------------------------


---------------------------------------DBMS(Oracle)------------------------------------------------
DB
  관계형 DBMS 관계형 데이터베이스
  Oracle, MySQL, Postgresql, Sybase, DB2...

  Orcale (점유율70%)
    대표적인 DBMS 회사
    유료 SW - 개인이 공부용으로 쓰는거는 괜찮은데 그뒤로는 유료
  MySql
    무료 오픈소스 DBMS
    주로 많이 씀
    현재는 둘다(오라클, mysql) 오라클거임
  포스트그레sql
    얘도 무료
    일본에서 많이 쓰는......? 
  sybase
    옛날에는 많이 썼는데 현재는 점유율내려감
  DB2
    IBM에서 만듦
  SQLServer
    MS에서 개발
  큐브리드
    한국에서 만든 오픈소스 DBMS
    오라클하고 거의 비슷함(99.9%)
    
오라클 다운로드 -> database 11g 다운 -> express edition for window -> 64bit -> 압축풀기 -> 셋업 -> next -> next -> 설치위치는 C -> 비밀번호 중요하니까 yadoc 으로 통일

접속방법
cmd > sqlplus system/비밀번호

오라클은 비밀번호에서 대소문자를 구분한다
유저 아이디는 대소문자 구분 안함

오라클의 구성요소
  1) 시스템(system)
    오라클을 관리하는 계정
    시스템 계정에서 전체 오라클을 관리할수있음(비밀번호 필요)
    외부에서도 접근가능
    system계정으로 DB사용해도 되는데 시스템계정이 너무 복잡해져서 권장하지 않음

  2) sys
    로컬에서만 쓰는 시스템 계정
    외부에서는 x 내부에서만 관리 가능.

  3) hr
    일반 계정
    보안상의 이유로 잠겨져 있어서 활성화 필요함.
    미리 만들어진 DB샘플이 들어있는 계정
    conn hr/hr < 명령어로 연결 가능
  
  hr로 연결하는 법
    sqlplus system/비번		sql 로그인(?)
    conn system/비밀번호		시스템으로 연결 (conn 계정명/비밀번호 < 연결하는 명령어)
    alter user hr account unlock;	hr 계정을 잠금해제함.(system 계정으로만 해제 가능)
    alter user hr identified by hr(비번);	hr 비밀번호를 hr로 바꿈(잠금 해제 후 비밀번호를 바꿔줘야함)(system같은 관리자 권한으로만 가능)
    conn hr/hr			hr로 연결
    exit				나가기

  Oracle은 DBMS이기때문에 기본 쿼리문으로 가능....
  select table_name from user_tables order by table_name;

  조회명령 select * from 테이블명;
  ??컬럼만 보이는 명령?desc 테이블명;
  원하는 몇가지만 보게하자 select 원하는 컬럼들,,, from 테이블명;
  set lin 원하는... 줄수........

  세미콜론을 쳐야 명령의 끝으로 인식
오라클 에러는 ORA-오류넘버 로 되어있어서 검색하면 금방 원인을 알수있음.

-----------------------------------------------------------------------------------------------------

----------------------------------------JDBC----------------------------------------------------
JDBC
  JAVA <-> JDBC <-> DB
  JAVA와 DB(Oracle)을 연결
  자바는 DB와 연결되어있지 않아서 따로 JDBC라는 중간 매개체를 둬 연결해야함
  JDBC 드라이버를 통해 연결함.
  인터페이스를 이용하기때문에 이런 연결이 가능함.(JDBC 드라이버에 구현이 되어있고 사용자는 사용만 하면 됨)
  
  JDBC 사용방식
    1. JDBC-Odbc 방식
      jdbc는 odbc하고만 연결하고 odbc가 db와 연결하는 방식
      access라는 ms 오피스에서 사용(윈도우 전용)

    2. Native driver 방식
      네이티브.. 자바가 아닌 다른 언어에서 만들어서 설치를 하고 접속하는 시스템에 접속
      접속하려면 직접 드라이버 설치를 해야하는 단점ㅇ
    
    3. 3-tier방식(자바)
       jdbc를 프로그램이 아니고 서버(미들웨어)를 만듦
      자바가 그 서버를 연결하면 서버가 디비에 연결
      자바는 디비 생각을 안해도 되는 장점(순수한 자바 사용 가능)
      서버 구축 비용이 많이 듦(효율대비 비용ㅇ)(이론적으론 ㄱㅊ은데 속도도 그닥)

    ★4. 드라이버 방식(자바)★
      걍 자바.. 2번 네이티브와 비슷한데 2번은 드라이버는 자바가 아닌데 4번은 설치까진 같은데 자바라서 설치가 쉬움.
      JDBC까지 클라이언트에 포함시킴.(자바랑 jdbc를 클라이언트로)
      2번과 3번의 중간정도..
      자바 드라이버를 자바에 설치함.....
      JDBC -URL-> <-데이터- DB, JDBC에서 데이터를 자바로 보내줌
     
mvnrepository
  ojdbc -> usages가 많은 곳 들어가서 다운(ojdbc8) -> jar 다운 -> 이클립스 가서 원하는 자바 프로젝트에서 새폴더(패키지x, 진짜 폴더, lib) -> 폴더에 ojdbc 파일 복사 -> ★빌드패스 설정(자바 프로젝트 폴더-> properties -> java build path -> libraries -> classpath 선택 -> add jars -> 새폴더(lib)에서 ojdbc 선택 -> apply)★

  소스를 크게 세단계로 나눔
    1. Driver Manager로 DB연결(접속)
      가져오는 DM
    2. Statement, ResultSet으로 처리
       SQL이라는 랭기쥐를 statement, ResultSet이라는 객체로 처리
       
    ★3. (가장중요) 예외처리 및 종결처리★
      DB를 안닫거나 그런 일은 일어나면 안됨!(쌓이다보면 접근이 안됨..)
      framework를 쓰면 해결되지만... 일단 머리에 넣어둬야함
      안하면 에러는 안나겠지만 꼭 해야함

  ResultSet
    컬럼을 가지고올땐 getString
    getString으로 다 가지고올수있는데 각 컬럼별로 타입이 있어서 그 타입별로 가져오면 더 좋음
    (n)n자리 정수 : 4자리 정수 -> 보통 int -> getInt로 가져오면 더 좋음.
    VARCHAR2 -> 문자열
    date(날짜) -> date
    실수 -> double
		-> 타입별로 getType하면 됨    

  JDBC
    java.sql 패키지에 다 들어있음
    
----------------------------------------------
  실습
    부서ID		부서명	매니저ID 나오게
    -> msRs = 쿼리문을 select * from departments로
    -> sysout문에서 getString은 department_id, department_name, manager_id 해줌
------------------------------------------------

자바의 날짜/시간
  Calendar class
    날짜, 시간 종류가 있음
    걍 달력(과거, 미래)
    추상 클래스임. -> 객체 못만듦 -> calendar.getInstance()로 정보 얻어옴
    get(Calendar.~~) 로 원하는 시간정보 가져옴

  Date class
    현재만 가리키는 시간. 현재시점에 관한 정보를 얻을 수 있음.
    Date는 java.util의 date임
    date는 객체임( Date date = new Date(); 로 받아올수 ㅇ)    
    date.getTime() -> 현재 시간을 밀리세컨드로 표시 (기준 : 1970-01-01 자정 GMT)

  SimpleDateFormat(yyyy-mm-dd)
    객체를 생성하면서 원하는 포맷을 적어주면 됨.
    sdf.format(date(<- Date객체)) 넣어주면 원하는 포맷의 날짜정보가 나옴.



-------------------------------------------200603----------------------------------
(오라클)
  desc 테이블명					그 테이블의 구조를 보여주는 명령어(이름, 타입, null여부가 출력됨)
  select * from 테이블명 where 조건;			해당 조건을 만족하는 요소만 가져옴
  order by (asc)	(order by desc)			오름차순으로 정렬(asc생략가능) (내림차순), order by는 ,로 여러개의 오름차순 조건 설정이 가능하다.
  OR연산자(조건 OR 조건) IN연산자(조건 in(조건,조건,,)	조건이 여러개일때 사용 가능
  CRUD (Create Retrieve Update Delete) 연산(크루드 명령)
    조회	select
    추가	insert	insert into 테이블명(필드명1, 필드명2,...) values(값1, 값2,....)	테이블명1에 값1이 들어가는 것
    수정	update	update 테이블명 set 필드명1=값1, 필드명2=값2.... ★where 조건★;	★여기서 만약 where구문이 없다면 전체 테이블이 수정되어 버림!!!★
    삭제	delete	delete from 테이블명 ★where 조건★;	★제일 위험 조건이 없으면 전체 테이블이 지워짐 조심!!!!!★
	삭제의 경우 연관된 테이블이 있으면 지울수가 없음.. -> 연관된 테이블부터 지워야함
	

  트랜잭션 (Transaction)
    거래..
    추가, 수정, 삭제는 트랜잭션이라고 함
    테이블에 변화가 오는 경우
    성공(정상거래, commit)
    실패(원상복구, rollback) 두가지 결과가 있음.	가장 마지막으로 commit됐던 시점으로 돌아감.
      -> 명령을 끝내고 따로 해줘야함. (이것까지 해줘야 진짜 변화가 저장된다.(복구든 저장이든))
    자바의 트랜잭션은 auto commit형태
      ->트랜잭션이 처리되고 msg가 뜨기 전 그 사이에 에러가 발생하면 트랜잭션은 처리되지만 사용자에게 메세지는 가지 않게됨.
      -> 오토커밋을 끄고 프로그래머가 직접 트랜잭션을 처리해줘야함

  갯수세기
    select count(*) from 갯수셀테이블;
    특징 : 딱 한 값으로 나옴(갯수니까)

---------------------------------------------------
  추가
    job_id = CL, job_title = 청소, min_salary : 1000, max_salary = 2000;
    -> insert into jobs(job_id, job_title, min_salary, max_salary) values ('CL', '청소', 1000, 2000);
    -> 이클립스에서 JDBC로 추가할땐 executeUpdate사용, result는 따로 없으므로 connection하고 statement만 사용하면 됨. + 자동 commit

  수정
    나라 테이블에서 한국이 속해있는 지역을 유럽으로 변경
    -> update countries set region_id=1 where country_id='KR';

  삭제
    나라 테이블에서 한국 삭제
    -> delete from countries where country_id='KR';    

    나라 테이블에서 일본 삭제
    -> violated - child record found (연관되어있는 테이블이 있어서 지울수없음!)
    -> select table_name from user_tables order by table_name;
    -> 주소 테이블쪽의 일본 주소 전부 삭제
    -> 나라 테이블의 일본 삭제

  카운트
    지역이 아시아인 나라의 갯수?
    -> select count(*) from countries where region_id=3;
------------------------------------------------------
------------------------------------------과제------------------------------------------------
CountJob.java
  Job_Id 입력받아서 받은 직업을 가진 사람이 몇명인지 출력하기
  ????는 총 ?명입니다. 출력
  ★Jdbc에서는 명령어 끝에 세미콜론 안씀!!!!★
------------------------------------------------------------------------------------------------

String class
  ""로 이루어진 문자열
  객체임
  불변이라는 특징을 지님(Immutable) (<-> 변성 mutable)
  -> 일반적인 객체는 변하지만 String객체는 없어질수는 있는데 변하지는 않음.
  -> String + String 하면 String자체는 변하지 않고 copy해서 새로운 스트링을 만들어내는것임

Wrapper class
  int, byte, short, long, float, double, boolean -> 이 타입들은 객체가 아님
  그런 타입들을 객체로 쓰기위해 클래스로 만들어놓은것
  기본타입 -박싱-> <-언박싱- 랩퍼클래스 (Auto boxing/unboxing이라서 알아서 해줌)
  Integer, Byte, Short, Long, Float, Double, Boolean으로 설정(?)하면 박싱이 됨. 
  int는 객체가 아니라서 객체가 들어가야하는 상황에서 Integer를 사용함.

  객체는 바로 값을 가리키지 않고 주소값을 갖고있는거라서 표현하자면 내가 갖고있는 100원동전과 너가 갖고있는 100원 동전이 같은가? -> 100원동전이라는건 같지만 다른 객체임.
  -> == 두 객체가 완전히 같은것(같은 집에있는 동전임)(주소값을 봄)
  -> equals함수 두 객체가 같은 값인가(둘다 100원 동전임)의 차이

문자열 변환
  1. 숫자 -> 문자	""+숫자	valueOf
  2. 문자 -> 숫자	Integer.parseInt(문자)
  문자열+문자열 = 문자열이기때문에 문자열로 된 숫자를 더하고싶으면 변환을 해줘야한다.

--------------------------------------------------------------------------------
숙제 겸 과제
  프로그램명 : ContryRegion.java
  지역 아이디(1:유럽, 2:아메리카, 3:아시아, 4:중동, 아프리카) < 입력받아서
  출력으로 해당 id에 해당하는 나라들 출력
--------------------------------------------------------------------------------






